/**
 * Amadeus Travel Innovation Sandbox
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/OtherReservationBookingInfo'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./OtherReservationBookingInfo'));
  } else {
    // Browser globals (root is window)
    if (!root.AmadeusTravelInnovationSandbox) {
      root.AmadeusTravelInnovationSandbox = {};
    }
    root.AmadeusTravelInnovationSandbox.OtherReservation = factory(root.AmadeusTravelInnovationSandbox.ApiClient, root.AmadeusTravelInnovationSandbox.OtherReservationBookingInfo);
  }
}(this, function(ApiClient, OtherReservationBookingInfo) {
  'use strict';




  /**
   * The OtherReservation model module.
   * @module model/OtherReservation
   * @version 1.2
   */

  /**
   * Constructs a new <code>OtherReservation</code>.
   * @alias module:model/OtherReservation
   * @class
   * @param id {String} Uniquely identifies this other reservation in this travel record. This ID is persistent, and remains the same for the lifetime of the travel record.
   * @param _date {Date} Date on which this other reservation will begin, in the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> date format yyyy-MM-dd.
   * @param location {String} A 3 letter <a href=\"https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\">IATA code</a> that identifies where this other reservation will occur.
   * @param travelerIds {Array.<String>} Traveler identifiers to indicate the travelers to whom this reservation applies.
   * @param bookingInfo {module:model/OtherReservationBookingInfo} The status of this reservation.
   */
  var exports = function(id, _date, location, travelerIds, bookingInfo) {
    var _this = this;

    _this['id'] = id;
    _this['date'] = _date;
    _this['location'] = location;

    _this['traveler_ids'] = travelerIds;
    _this['booking_info'] = bookingInfo;
  };

  /**
   * Constructs a <code>OtherReservation</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/OtherReservation} obj Optional instance to populate.
   * @return {module:model/OtherReservation} The populated <code>OtherReservation</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('date')) {
        obj['date'] = ApiClient.convertToType(data['date'], 'Date');
      }
      if (data.hasOwnProperty('location')) {
        obj['location'] = ApiClient.convertToType(data['location'], 'String');
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('traveler_ids')) {
        obj['traveler_ids'] = ApiClient.convertToType(data['traveler_ids'], ['String']);
      }
      if (data.hasOwnProperty('booking_info')) {
        obj['booking_info'] = OtherReservationBookingInfo.constructFromObject(data['booking_info']);
      }
    }
    return obj;
  }

  /**
   * Uniquely identifies this other reservation in this travel record. This ID is persistent, and remains the same for the lifetime of the travel record.
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * Date on which this other reservation will begin, in the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> date format yyyy-MM-dd.
   * @member {Date} date
   */
  exports.prototype['date'] = undefined;
  /**
   * A 3 letter <a href=\"https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\">IATA code</a> that identifies where this other reservation will occur.
   * @member {String} location
   */
  exports.prototype['location'] = undefined;
  /**
   * A free-text description of this reservation, that will inform you of its functional meaning.
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * Traveler identifiers to indicate the travelers to whom this reservation applies.
   * @member {Array.<String>} traveler_ids
   */
  exports.prototype['traveler_ids'] = undefined;
  /**
   * The status of this reservation.
   * @member {module:model/OtherReservationBookingInfo} booking_info
   */
  exports.prototype['booking_info'] = undefined;



  return exports;
}));



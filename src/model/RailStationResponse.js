/**
 * Amadeus Travel Innovation Sandbox
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Geolocation'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Geolocation'));
  } else {
    // Browser globals (root is window)
    if (!root.AmadeusTravelInnovationSandbox) {
      root.AmadeusTravelInnovationSandbox = {};
    }
    root.AmadeusTravelInnovationSandbox.RailStationResponse = factory(root.AmadeusTravelInnovationSandbox.ApiClient, root.AmadeusTravelInnovationSandbox.Geolocation);
  }
}(this, function(ApiClient, Geolocation) {
  'use strict';




  /**
   * The RailStationResponse model module.
   * @module model/RailStationResponse
   * @version 1.2
   */

  /**
   * Constructs a new <code>RailStationResponse</code>.
   * @alias module:model/RailStationResponse
   * @class
   * @param id {String} The ID of this station, as provided in the request
   * @param type {String} The type of code to which this station refers. Some codes represent agglomeration of multiple stations, whereas others represent an individual station. Possible values are AGGLOMERATION and STATION.
   * @param name {String} The name of this station.
   * @param shortName {String} The shortened name of this station (20 characters max) which may be used in certain cases.
   * @param country {String} The <a href=\"http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">ISO 3166-1 alpha-2 country code</a> in which this station can be found.
   * @param location {module:model/Geolocation} This stations's approximate geolocation. 
   * @param traffic {String} An indication of the level of Intercity traffic passing through this station.
   */
  var exports = function(id, type, name, shortName, country, location, traffic) {
    var _this = this;

    _this['id'] = id;
    _this['type'] = type;
    _this['name'] = name;
    _this['short_name'] = shortName;
    _this['country'] = country;
    _this['location'] = location;
    _this['traffic'] = traffic;
  };

  /**
   * Constructs a <code>RailStationResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/RailStationResponse} obj Optional instance to populate.
   * @return {module:model/RailStationResponse} The populated <code>RailStationResponse</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('short_name')) {
        obj['short_name'] = ApiClient.convertToType(data['short_name'], 'String');
      }
      if (data.hasOwnProperty('country')) {
        obj['country'] = ApiClient.convertToType(data['country'], 'String');
      }
      if (data.hasOwnProperty('location')) {
        obj['location'] = Geolocation.constructFromObject(data['location']);
      }
      if (data.hasOwnProperty('traffic')) {
        obj['traffic'] = ApiClient.convertToType(data['traffic'], 'String');
      }
    }
    return obj;
  }

  /**
   * The ID of this station, as provided in the request
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * The type of code to which this station refers. Some codes represent agglomeration of multiple stations, whereas others represent an individual station. Possible values are AGGLOMERATION and STATION.
   * @member {String} type
   */
  exports.prototype['type'] = undefined;
  /**
   * The name of this station.
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * The shortened name of this station (20 characters max) which may be used in certain cases.
   * @member {String} short_name
   */
  exports.prototype['short_name'] = undefined;
  /**
   * The <a href=\"http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">ISO 3166-1 alpha-2 country code</a> in which this station can be found.
   * @member {String} country
   */
  exports.prototype['country'] = undefined;
  /**
   * This stations's approximate geolocation. 
   * @member {module:model/Geolocation} location
   */
  exports.prototype['location'] = undefined;
  /**
   * An indication of the level of Intercity traffic passing through this station.
   * @member {String} traffic
   */
  exports.prototype['traffic'] = undefined;



  return exports;
}));



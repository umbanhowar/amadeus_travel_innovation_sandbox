/**
 * Amadeus Travel Innovation Sandbox
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Geolocation'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Geolocation'));
  } else {
    // Browser globals (root is window)
    if (!root.AmadeusTravelInnovationSandbox) {
      root.AmadeusTravelInnovationSandbox = {};
    }
    root.AmadeusTravelInnovationSandbox.CityInformation = factory(root.AmadeusTravelInnovationSandbox.ApiClient, root.AmadeusTravelInnovationSandbox.Geolocation);
  }
}(this, function(ApiClient, Geolocation) {
  'use strict';




  /**
   * The CityInformation model module.
   * @module model/CityInformation
   * @version 1.2
   */

  /**
   * Constructs a new <code>CityInformation</code>.
   * @alias module:model/CityInformation
   * @class
   * @param code {String} The <a href=\"https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\">IATA code</a> of this city. If you intend to make a flight search from the output of this call, I recommend using this as your input parameter as it generally gives the best results.
   * @param geonamesID {String} The ID of this city in the open-sourced Geonames DB
   * @param name {String} The name of this city, in English
   * @param country {String} The <a href=\"http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">ISO 3166-1 alpha-2 country code</a> in which this city can be found.
   * @param location {module:model/Geolocation} This city's approximate geolocation. The exact center of a city is often not an exact location, so be aware that this might not be exact.
   * @param timezone {String} The <a href=\"http://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">Olson format</a> name of the timezone in which this city is located
   */
  var exports = function(code, geonamesID, name, country, location, timezone) {
    var _this = this;

    _this['code'] = code;
    _this['geonames_ID'] = geonamesID;
    _this['name'] = name;

    _this['country'] = country;
    _this['location'] = location;
    _this['timezone'] = timezone;

  };

  /**
   * Constructs a <code>CityInformation</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CityInformation} obj Optional instance to populate.
   * @return {module:model/CityInformation} The populated <code>CityInformation</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('code')) {
        obj['code'] = ApiClient.convertToType(data['code'], 'String');
      }
      if (data.hasOwnProperty('geonames_ID')) {
        obj['geonames_ID'] = ApiClient.convertToType(data['geonames_ID'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('state')) {
        obj['state'] = ApiClient.convertToType(data['state'], 'String');
      }
      if (data.hasOwnProperty('country')) {
        obj['country'] = ApiClient.convertToType(data['country'], 'String');
      }
      if (data.hasOwnProperty('location')) {
        obj['location'] = Geolocation.constructFromObject(data['location']);
      }
      if (data.hasOwnProperty('timezone')) {
        obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
      }
      if (data.hasOwnProperty('currency')) {
        obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
      }
    }
    return obj;
  }

  /**
   * The <a href=\"https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\">IATA code</a> of this city. If you intend to make a flight search from the output of this call, I recommend using this as your input parameter as it generally gives the best results.
   * @member {String} code
   */
  exports.prototype['code'] = undefined;
  /**
   * The ID of this city in the open-sourced Geonames DB
   * @member {String} geonames_ID
   */
  exports.prototype['geonames_ID'] = undefined;
  /**
   * The name of this city, in English
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * The state code of this city, if applicable
   * @member {String} state
   */
  exports.prototype['state'] = undefined;
  /**
   * The <a href=\"http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">ISO 3166-1 alpha-2 country code</a> in which this city can be found.
   * @member {String} country
   */
  exports.prototype['country'] = undefined;
  /**
   * This city's approximate geolocation. The exact center of a city is often not an exact location, so be aware that this might not be exact.
   * @member {module:model/Geolocation} location
   */
  exports.prototype['location'] = undefined;
  /**
   * The <a href=\"http://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">Olson format</a> name of the timezone in which this city is located
   * @member {String} timezone
   */
  exports.prototype['timezone'] = undefined;
  /**
   * The ISO-4217 currency code of the official local currency at this location
   * @member {String} currency
   */
  exports.prototype['currency'] = undefined;



  return exports;
}));



/**
 * Amadeus Travel Innovation Sandbox
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Geolocation'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Geolocation'));
  } else {
    // Browser globals (root is window)
    if (!root.AmadeusTravelInnovationSandbox) {
      root.AmadeusTravelInnovationSandbox = {};
    }
    root.AmadeusTravelInnovationSandbox.NearestAirport = factory(root.AmadeusTravelInnovationSandbox.ApiClient, root.AmadeusTravelInnovationSandbox.Geolocation);
  }
}(this, function(ApiClient, Geolocation) {
  'use strict';




  /**
   * The NearestAirport model module.
   * @module model/NearestAirport
   * @version 1.2
   */

  /**
   * Constructs a new <code>NearestAirport</code>.
   * @alias module:model/NearestAirport
   * @class
   * @param airport {String} The 3 letter IATA airport code of this given airport. You can use this as an input parameter for a low-fare flight search, to get more specific results than the city code, but inspiration search works best using the city code.
   * @param airportName {String} The name of this airport, in UTF-8 format
   * @param city {String} The three letter <a href=\"https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\">IATA code</a> of the city of the city in which this airport is located.
   * @param cityName {String} The English name of the city in which this airport is located
   * @param distance {Number} The distance in km from the point specified in the query, to this location
   * @param location {module:model/Geolocation}   An object containing the longitude and latitude of the given airport.
   * @param timezone {String} The <a href=\"http://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">Olson format</a> name of the timezone in which this airport is located
   */
  var exports = function(airport, airportName, city, cityName, distance, location, timezone) {
    var _this = this;

    _this['airport'] = airport;
    _this['airport_name'] = airportName;
    _this['city'] = city;
    _this['city_name'] = cityName;

    _this['distance'] = distance;
    _this['location'] = location;

    _this['timezone'] = timezone;
  };

  /**
   * Constructs a <code>NearestAirport</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/NearestAirport} obj Optional instance to populate.
   * @return {module:model/NearestAirport} The populated <code>NearestAirport</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('airport')) {
        obj['airport'] = ApiClient.convertToType(data['airport'], 'String');
      }
      if (data.hasOwnProperty('airport_name')) {
        obj['airport_name'] = ApiClient.convertToType(data['airport_name'], 'String');
      }
      if (data.hasOwnProperty('city')) {
        obj['city'] = ApiClient.convertToType(data['city'], 'String');
      }
      if (data.hasOwnProperty('city_name')) {
        obj['city_name'] = ApiClient.convertToType(data['city_name'], 'String');
      }
      if (data.hasOwnProperty('state')) {
        obj['state'] = ApiClient.convertToType(data['state'], 'String');
      }
      if (data.hasOwnProperty('distance')) {
        obj['distance'] = ApiClient.convertToType(data['distance'], 'Number');
      }
      if (data.hasOwnProperty('location')) {
        obj['location'] = Geolocation.constructFromObject(data['location']);
      }
      if (data.hasOwnProperty('aircraft_movements')) {
        obj['aircraft_movements'] = ApiClient.convertToType(data['aircraft_movements'], 'Integer');
      }
      if (data.hasOwnProperty('timezone')) {
        obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
      }
    }
    return obj;
  }

  /**
   * The 3 letter IATA airport code of this given airport. You can use this as an input parameter for a low-fare flight search, to get more specific results than the city code, but inspiration search works best using the city code.
   * @member {String} airport
   */
  exports.prototype['airport'] = undefined;
  /**
   * The name of this airport, in UTF-8 format
   * @member {String} airport_name
   */
  exports.prototype['airport_name'] = undefined;
  /**
   * The three letter <a href=\"https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\">IATA code</a> of the city of the city in which this airport is located.
   * @member {String} city
   */
  exports.prototype['city'] = undefined;
  /**
   * The English name of the city in which this airport is located
   * @member {String} city_name
   */
  exports.prototype['city_name'] = undefined;
  /**
   * The state code of this city, if applicable
   * @member {String} state
   */
  exports.prototype['state'] = undefined;
  /**
   * The distance in km from the point specified in the query, to this location
   * @member {Number} distance
   */
  exports.prototype['distance'] = undefined;
  /**
   *   An object containing the longitude and latitude of the given airport.
   * @member {module:model/Geolocation} location
   */
  exports.prototype['location'] = undefined;
  /**
   * The annual number of aircraft movements at that airport.
   * @member {Integer} aircraft_movements
   */
  exports.prototype['aircraft_movements'] = undefined;
  /**
   * The <a href=\"http://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">Olson format</a> name of the timezone in which this airport is located
   * @member {String} timezone
   */
  exports.prototype['timezone'] = undefined;



  return exports;
}));


